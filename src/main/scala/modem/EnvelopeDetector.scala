package modem

import chisel3._
import chisel3.util._
import chisel3.experimental.FixedPoint

class EnvelopeDetector(bitWidth: Int) extends Module {
  val io = IO(new Bundle {
    val in = Flipped(Decoupled(SInt(bitWidth.W)))
    val out = Decoupled(UInt((bitWidth + 3).W)) // TODO: Determine width of sum output
  })

  val cyclesPerSymbol = 20 // TODO: Make this a MMIO setting

  val counter = RegInit(0.U(8.W))

  val integral = RegInit(0.F((bitWidth + 18).W, 15.BP))

  // Targeting 20 MHz sample rate, minimum order equiripple, Apass = 1, Astop = 20
  val lowpassFixedPointWeights = Seq(0.021683193299446915092154597459739306942,
    -0.038569811057873895632219785056804539636,
    -0.014362293303648542008854605001033633016,
    -0.003056119086043640464822601643390953541,
  0.002019837164752402713929768651723861694,
  0.003838013661660102937567273784225108102,
  0.003710635612364607260893478724028682336,
  0.002304525437075495564176463858530041762,
  0.00021839535275503668687591130037617404,
  -0.001888364314777082886287473684205906466,
  -0.003322875001972397379645940418413374573,
  -0.003593566969660864918179044025237089954,
  -0.002553526317891248453850749910998274572,
  -0.000552032909237727686946328731210087426,
  0.001700630061278365912080801081174286082,
  0.00334926586030890455214503731440345291,
  0.003743395649833350380397689605160849169,
  0.002674218395623491340007404915013466962,
  0.000517836722542637517552321924085845239,
  -0.001927295476854044842252022817774559371,
  -0.003686045352877240222078114584292052314,
  -0.004036711360992525920998730271094245836,
  -0.002770792923310366751010747066175099462,
  -0.000340818123462226230113714109393185936,
  0.00233030099126867867864731920235499274,
  0.004160133310405357554007110820748494007,
  0.004385059521674616878073038606089539826,
  0.002825099373384355738725304263425641693,
  0.000057036592282858067370909793680766597,
  -0.002865516038926221864535648364835651591,
  -0.004737601259509442719330962745516444556,
  -0.004767345381302086348984659025518340059,
  -0.002838009812089807570867350250409799628,
  0.000327317210306876660297348280437290668,
  0.003529649212529482882327869219807325862,
  0.005404163107224448092669177867719554342,
  0.005193341517897576142814841659856028855,
  0.002786120177273511411275563887102180161,
  -0.000828308337132543925918071181513369083,
  -0.004321952081936121514704751689350814559,
  -0.00621768568845993546689854269970965106,
  -0.005610969618355526877806482843880075961,
  -0.002705491759487164971087480580536066554,
  0.001478756065185542201145807439388590865,
  0.005305743387781121367385850362552446313,
  0.007138085193364840375096491698059253395,
  0.006113734716447709327535875445391866378,
  0.002527025134090192526326035249439883046,
  -0.002312980611396904528920259735969011672,
  -0.006507785041705134443379421327335876413,
  -0.008267202602107850961665747036022366956,
  -0.006691262525328853238981707818311406299,
  -0.002239960975039589907709114413592033088,
  0.003418067834291563245052714137273142114,
  0.008037206500820598398249217098054941744,
  0.009640696926272479538866377879458013922,
  0.007356322680522019152871138203408918343,
  0.001838610074840159314124576894755591638,
  -0.004871563318520635843533739262056769803,
  -0.010071701700615449948106316924167913385,
  -0.011468562992171561776277854960426338948,
  -0.008180009170255381212299994331260677427,
  -0.001174678354034411342787791454611578956,
  0.006935317817650658855921363965535419993,
  0.012885847915820328180025455822033109143,
  0.013984082203863774929164520699487184174,
  0.009298279992709157504293671081541106105,
  0.000178113662148884910330082220752956346,
  -0.010040272480345072136920236971491249278,
  -0.017196289454651084160907714704080717638,
  -0.017893197635374745446679156657410203479,
  -0.011017011222011048598989901847744476981,
  0.001579774836181921382483039906219346449,
  0.015387219376083033361979346409498248249,
  0.02475742798557981766416347113590745721,
  0.02495395462093776689505020272008550819,
  0.014184596238987517979879271479148883373,
  -0.005171578230569746914557782702104304917,
  -0.026805449029267507110585455620821448974,
  -0.042011191392496961827252022203538217582,
  -0.042420530091644356729396747596183558926,
  -0.022824959320992748573742048279200389516,
  0.016735806599807785677302973681435105391,
  0.070300661944041331619104084893479011953,
  0.127176729563199336636714065207343082875,
  0.174720762551500485848521293519297614694,
  0.201763731437094029352863344684010371566,
  0.201763731437094029352863344684010371566,
  0.174720762551500485848521293519297614694,
  0.127176729563199336636714065207343082875,
  0.070300661944041331619104084893479011953,
  0.016735806599807785677302973681435105391,
  -0.022824959320992748573742048279200389516,
  -0.042420530091644356729396747596183558926,
  -0.042011191392496961827252022203538217582,
  -0.026805449029267507110585455620821448974,
  -0.005171578230569746914557782702104304917,
  0.014184596238987517979879271479148883373,
  0.02495395462093776689505020272008550819,
  0.02475742798557981766416347113590745721,
  0.015387219376083033361979346409498248249,
  0.001579774836181921382483039906219346449,
  -0.011017011222011048598989901847744476981,
  -0.017893197635374745446679156657410203479,
  -0.017196289454651084160907714704080717638,
  -0.010040272480345072136920236971491249278,
  0.000178113662148884910330082220752956346,
  0.009298279992709157504293671081541106105,
  0.013984082203863774929164520699487184174,
  0.012885847915820328180025455822033109143,
  0.006935317817650658855921363965535419993,
  -0.001174678354034411342787791454611578956,
  -0.008180009170255381212299994331260677427,
  -0.011468562992171561776277854960426338948,
  -0.010071701700615449948106316924167913385,
  -0.004871563318520635843533739262056769803,
  0.001838610074840159314124576894755591638,
  0.007356322680522019152871138203408918343,
  0.009640696926272479538866377879458013922,
  0.008037206500820598398249217098054941744,
  0.003418067834291563245052714137273142114,
  -0.002239960975039589907709114413592033088,
  -0.006691262525328853238981707818311406299,
  -0.008267202602107850961665747036022366956,
  -0.006507785041705134443379421327335876413,
  -0.002312980611396904528920259735969011672,
  0.002527025134090192526326035249439883046,
  0.006113734716447709327535875445391866378,
  0.007138085193364840375096491698059253395,
  0.005305743387781121367385850362552446313,
  0.001478756065185542201145807439388590865,
  -0.002705491759487164971087480580536066554,
  -0.005610969618355526877806482843880075961,
  -0.00621768568845993546689854269970965106,
  -0.004321952081936121514704751689350814559,
  -0.000828308337132543925918071181513369083,
  0.002786120177273511411275563887102180161,
  0.005193341517897576142814841659856028855,
  0.005404163107224448092669177867719554342,
  0.003529649212529482882327869219807325862,
  0.000327317210306876660297348280437290668,
  -0.002838009812089807570867350250409799628,
  -0.004767345381302086348984659025518340059,
  -0.004737601259509442719330962745516444556,
  -0.002865516038926221864535648364835651591,
  0.000057036592282858067370909793680766597,
  0.002825099373384355738725304263425641693,
  0.004385059521674616878073038606089539826,
  0.004160133310405357554007110820748494007,
  0.00233030099126867867864731920235499274,
  -0.000340818123462226230113714109393185936,
  -0.002770792923310366751010747066175099462,
  -0.004036711360992525920998730271094245836,
  -0.003686045352877240222078114584292052314,
  -0.001927295476854044842252022817774559371,
  0.000517836722542637517552321924085845239,
  0.002674218395623491340007404915013466962,
  0.003743395649833350380397689605160849169,
  0.00334926586030890455214503731440345291,
  0.001700630061278365912080801081174286082,
  -0.000552032909237727686946328731210087426,
  -0.002553526317891248453850749910998274572,
  -0.003593566969660864918179044025237089954,
  -0.003322875001972397379645940418413374573,
  -0.001888364314777082886287473684205906466,
  0.00021839535275503668687591130037617404,
  0.002304525437075495564176463858530041762,
  0.003710635612364607260893478724028682336,
  0.003838013661660102937567273784225108102,
  0.002019837164752402713929768651723861694,
  -0.003056119086043640464822601643390953541,
  -0.014362293303648542008854605001033633016,
  -0.038569811057873895632219785056804539636,
  0.021683193299446915092154597459739306942)
    .map(c => FixedPoint.fromDouble(c, 16.W, 15.BP))

  // TODO: Check the output width
  val lowpass = Module(new GenericFIR(FixedPoint((bitWidth + 1).W, 0.BP), FixedPoint((bitWidth + 18).W, 15.BP), lowpassFixedPointWeights))
  lowpass.io.in.valid := io.in.valid
  lowpass.io.in.bits.data := Cat(0.U(1.W), io.in.bits.abs()).asFixedPoint(0.BP) // Take absolute value and ensure output as fixed point is interpreted properly
  io.in.ready := lowpass.io.in.ready

  lowpass.io.out.ready := counter =/= cyclesPerSymbol.U

  io.out.valid := counter === cyclesPerSymbol.U
  io.out.bits := integral.asUInt()(integral.getWidth - 1, 15)

  when (counter =/= cyclesPerSymbol.U) {
    when (lowpass.io.out.fire()) {
      counter := counter + 1.U
      integral := integral + lowpass.io.out.bits.data
    }
  }.elsewhen (counter === cyclesPerSymbol.U) {
    when (io.out.fire()) {
      counter := 0.U
      integral := 0.F(15.BP)
    }
  }
}