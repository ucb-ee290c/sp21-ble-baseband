import matplotlib.pyplot as plt
import numpy as np
from fixedpoint import FixedPoint
from scipy.signal import butter, lfilter
from scipy import signal
from numpy import pi
from scipy.fft import fft, fftfreq, fftshift
import fixedpoint
import math

# Constants

MHz = lambda f: f * 1000000
GHz = lambda f: f * 1000000

channel_index = 0
F_RF = MHz(2402 + 2 * channel_index) # 2.402 GHz
F_IF = MHz(2.5)  # 2.5 MHz
F_LO = F_RF - F_IF # LO frequency is RF frequency - Intermediate Frequency
F_IM = F_LO - F_IF # Image is on the other side of the LO
analog_F_sample = (F_LO * 2 + F_IF) * 2
ADC_sample_rate = MHz(20)
t_interval = 0.00001

HB_coeff = [-0.0000,    0.0001,    0.0000,   -0.0009,   -0.0000,    0.0040,    0.0000,   -0.0128,   -0.0000, 0.0340,    0.0000,   -0.0850,   -0.0000,    0.3106,    0.5000,    0.3106,   -0.0000,   -0.0850, 0.0000,    0.0340,  -0.0000,   -0.0128,    0.0000,    0.0040,   -0.0000,   -0.0009,    0.0000, 0.0001,   -0.0000]
""" Method of obtaining Hilbert Transform FIR coefficients
https://www.wirelessinnovation.org/assets/Proceedings/2011/2011-1b-carrick.pdf
"""

HB_coeff = [2 * np.sin(i * pi / 2) * HB_coeff[i] for i in range(0, len(HB_coeff))]
#print(HB_coeff)

#HB_coeff = [0.0, 0.0, 0.0, 0.002, 0.0, 0.008, 0.0, 0.026, 0.0, 0.068, 0.0, 0.17, 0.0, 0.6212, 0.0, -0.6212, 0.0, -0.17, 0.0, -0.068, 0.0, -0.026, 0.0, -0.008, 0.0, -0.002, 0.0, 0.0, 0.0]

HB_coeff = [FixedPoint(c, True, 1, 11, str_base=2) for c in HB_coeff]
print(['b' + str(c) for c in HB_coeff])
def butter_lowpass(cutoff, fs, order=5):
    sos = signal.butter(10, cutoff, 'lp', fs=fs, output='sos')
    return sos

def butter_lowpass_filter(data, cutoff, fs, order=5):
    sos = butter_lowpass(cutoff, fs, order=order)
    y = signal.sosfilt(sos, data)
    return y

def frequency_plot(wave, F_sample):
    yf = fft(wave)
    xf = fftfreq(int(F_sample *t_interval), 1 / F_sample)
    print("X:",len(xf))
    xf = fftshift(xf)
    yplot = fftshift(yf)
    plt.plot(xf, 1.0/int(F_sample *t_interval) * abs(yplot))
    plt.grid()
    
def fir(signal):
    print(len(signal))
    elements = [0 for _ in range(len(HB_coeff) - 1)]
    elements.extend(signal)
    result = []
    for i in range(len(signal)):
        e = 0
        for j in range(len(HB_coeff)):
            e += HB_coeff[j] * elements[i + len(HB_coeff) - j - 1]
        result.append(e)
    return result[len(HB_coeff):]

def RF(t):
    return np.cos(2 * pi * (F_LO + F_IF) * t + pi / 4)
    
def IM(t):
    return np.cos(2 * pi * (F_LO - F_IF) * t + pi / 4)
    
def mix(signal):
    def I(t):
        return signal(t) * np.cos(2 * pi * F_LO * t)
    def Q(t):
        return signal(t) * np.sin(2 * pi * F_LO * t)
    return I, Q
    
def quantize(s, scale, range):
    return int((s - scale) / range * 31)#TODO
    
def ADC_sampling(sig, F_sample, OLD_F_sample):
    """
        Takes in signals `I` & `Q` sampled at `OLD_F_sample` and resamples them at a new sampling
    frequency `F_sample`.
    """
    sig_sampled = [quantize(s, min(sig), max(sig) - min(sig)) for s in sig[::int(OLD_F_sample//F_sample)]] # resample & quantize I
    num_samples = int(F_sample * t_interval) # determine the number of samples in the time interval
    max_valid_sample = min(num_samples, len(sig_sampled))
    results = np.linspace(0, t_interval, num_samples)[:max_valid_sample], sig_sampled[:max_valid_sample] # remove extraneous elements
    return results


def analog_lowpass(I, Q):
    return butter_lowpass_filter(I, F_IF + MHz(1), analog_F_sample), butter_lowpass_filter(Q, F_IF + MHz(1), analog_F_sample)
    
def hilbert_transform(Q):
    signal = Q
    elements = [0 for _ in range(len(HB_coeff))]
    elements.extend(signal)
    result = []
    for i in range(len(signal)):
        e = 0
        for j in range(len(HB_coeff)):
            e += HB_coeff[j] * elements[i + len(HB_coeff) - j - 1]
        result.append(e)
    return result

t = np.linspace(0, t_interval, num = int(analog_F_sample *t_interval))
I, Q = mix(lambda t: RF(t))
I, Q = I(t), Q(t)
I, Q = analog_lowpass(I, Q)
result = ADC_sampling(I, MHz(20), analog_F_sample)
print("i = ", result[1])
t = result[0]
I = [s - 15 for s in result[1]]
result = ADC_sampling(Q, MHz(20), analog_F_sample)
print("q = ", result[1])
Q = [s - 15 for s in result[1]]
I = [FixedPoint(s, True, 6, 0) for s in I]
Q = [FixedPoint(s, True, 6, 0) for s in Q]

data = [19, -3, -23, -28, -16, 6, 25, 28, 15, -5, -22, -26, -14, 5, 23, 28, 17, -5, -22, -26, -14, 5, 23, 28, 17, -5, -22, -26, -14, 5, 23, 28, 17, -5, -22, -26, -14, 5, 23, 28, 17, -5, -22, -26, -14, 5, 23, 28, 17, -5, -22, -26, -14, 5, 23, 28, 17, -5, -22, -26, -14, 5, 23, 28, 17, -5, -22, -26, -14, 5, 23, 28, 17, -5, -22, -26, -14, 5, 23, 28, 17, -5, -22, -26, -14, 5, 23, 28, 17, -5, -22, -26, -14, 5, 23, 28, 17, -5, -22, -26, -14, 5, 23, 28, 17, -5, -22, -26, -14, 5, 23, 28, 17, -3, -22, -26, -16, 5, 23, 28, 17, -3, -22, -26, -16, 5, 23, 28, 17, -3, -22, -26, -16, 5, 23, 28, 17, -3, -22, -26, -16, 5, 23, 28, 17, -3, -22, -26, -16, 5, 23, 28, 17, -3, -22, -26, -16, 5, 23, 28, 17, -3, -22, -26, -16, 5, 23, 28, 17, -3, -22, -26]

ht = hilbert_transform(Q)
#plt.plot(list(range(len(data))), data)
#plt.plot(t, ht)
#plt.plot(t, Q)
#plt.plot(t, [(I[t] - ht[t]).__float__() for t in range(len(t))])
dataI = [1.8239016011122513E-8, 0.11124035597512184, 0.1509952030855402, -0.2227618213199664, -0.4253194978521514, -0.5000262619281236, -0.37882137013154954, -0.12011753664351714, 0.18410604459039057, 0.4197389430295282, 0.49949272189706595, 0.39373389305945194, 0.141718045705457, -0.16292775941950435, -0.4070617960935938, -0.49995297250918835, -0.4067144751698403, -0.1616378100134009, 0.146608905799618, 0.39741421634658414, 0.5006490668769271, 0.407345937338839, 0.14138068341030688, -0.1691444864105892, -0.4390634860841057, -0.49172206622923914, -0.29983963053894686, 0.009359337152456005, 0.39201788389720427, 0.49598158217538496, 0.29873944656551715, -0.02794884406256914, -0.426654621171422, -0.4950703341750333, -0.22370263723236242, 0.127722388438071, 0.4511306128324572, 0.48195829010245156, 0.21470407070651915, -0.13394754655437088, -0.42869851477464377, -0.4944375295814408, -0.3066512288527772, 0.020432317870929296, 0.34007471721934757, 0.4969712077770936, 0.4191514706190496, 0.14767156056090075, -0.19220474475831403, -0.4430340783636833, -0.4887754466190101, -0.30820729118667683, 0.015050484693896334, 0.3313424894029743, 0.4942268572865831, 0.4282955041807149, 0.16782938427740188, -0.16908820719151788, -0.4251521675058708, -0.49483280407509367, -0.37652452557964344, -0.11467174523820318, 0.1578462277043613, 0.35409325299762284, 0.4862659206666976, 0.4795810959318955, 0.4550133851592822, 0.4544249000246634, 0.35516129362673976, 0.47674450771790816, 0.33757261748579764, 0.5131328116295093, 0.4005347008593465, 0.46123872009453326, 0.4467084974997192, 0.38267063218252667, 0.46184566851653625, 0.3955919747077534, 0.5031823463391027, 0.47597950053773486, 0.4734575490587548, 0.40890646045831297, 0.21894137365936017, 0.03769267697518729, -0.22829553133720387, -0.402393200451211, -0.4996077699172553, -0.4509387555622123, -0.2746328558132986, -0.018545635964662743, 0.2428974524831216, 0.4340828611510578, 0.4998488519191256, 0.4211225613593697, 0.220692662748944, -0.043528210111268874, -0.2956127315650861, -0.46597242510523784, -0.49076509417904096, -0.3454396480110096, -0.09865853257291465, 0.2665313241693499, 0.45278482310696977, 0.4185039437407686, 0.1771790338286042, -0.40998810809825226, -0.4971518392601372, 0.20792180969840934, 0.4848299159393922, -0.21621018939749065, -0.514986346358404, 0.3378607099420136, 0.5068509711757093, -0.30198105638293565, -0.28362554720121197, 0.28741643399650874, 0.06790009869731331, -0.35247926633650517, -0.13792180106952018, 0.3920121120098444, 0.46598288743451893, 0.06578540663500844, -0.3039012101958577, -0.44918465792066314, -0.4889221738761528, -0.46281765040079215, -0.45693411355762065, -0.3553625443762484, -0.5079054151034773, -0.15068137156406183, -0.09531707967960576, -0.0020492166454032152, 0.6050909664511722, 0.06015583597366023, -0.10354801172514608, -0.05424906964671171, -0.5895915549823793, -0.3047028915462811, -0.3384507040566124, -0.392840203689938, -0.3098297075973763, -0.49492698459973916, -0.4814571294099834, -0.387609346930016, -0.03327067103727416, 0.2625862865113196, 0.445398098927377, 0.016388691711942193, -0.463372275584828, -0.07181973407737627, 0.013384324986470932, -0.14310210096227027, 0.5679613373974889, 0.2882221180526364, -0.047623939370461124, 0.2189682158649723, -0.5098456569427583, -0.3485991790348942, 0.5505199183611039, 0.24972839223235976, -0.5288620696445272, -0.39080315109806313, 0.20867742742510922, 0.4482254891850464, 0.4138322715482627, 0.11677405687167333, -0.28159937803952323, -0.48168586087550513, -0.44894208091534155, -0.20358042461382134, 0.13588934861552027, 0.4122125537563498, 0.4978727202857538, 0.3529193029526211, 0.04462198059265296, -0.2843586780524213, -0.4816750949389053, -0.45631577099073306, -0.23519673235231578, 0.09590697044314901, 0.3420490393874523, 0.4896574181926678, 0.4932045002619409, 0.3575390685867484, 0.3441216856759444, 0.19726313259110517, 0.3251803940526633, 0.3665625195867709, 0.16408901865229808, 0.4558090313237896, -0.15243775075894203, -0.5749727936799223, 0.2128228834223911, 0.5516822503951954, -0.16405336674729126, -0.5686934366414587, 0.1611620538695081, 0.4734617364728418, 0.08582498882228745, 0.24015885744630522, 0.0568954194315459, -0.1831308727706159, -0.007133218257521161
]

dataQ = [0.0, -0.13990646153753067, -0.528542756773875, -0.4443719893126211, -0.2560169685198859, 0.04579387263645251, 0.3254726147594493, 0.48537701663976257, 0.46491978926630156, 0.2716733382419357, -0.02238936472033652, -0.308188980654131, -0.4794921102247255, -0.4727106034993488, -0.29034592857093455, -1.3790069019586516E-6, 0.2909205885491207, 0.47291646720195696, 0.4782641119025108, 0.3027228980575906, 0.005229891548775328, -0.2883450067876584, -0.4810344869855034, -0.4680651652144569, -0.24254100483451183, 0.06897030200535534, 0.40344633028647997, 0.4958715082768237, 0.31693394598315466, 0.004636123137598958, -0.40070130992777286, -0.49729494885371583, -0.25689400351708563, 0.07989742495928964, 0.44479048790260584, 0.48665477397862367, 0.2034488503395763, -0.14819200631691035, -0.4479612492433677, -0.48520178807445885, -0.2531541577605757, 0.08875228439639295, 0.39214920821655685, 0.5011646229464704, 0.36508499487087315, 0.0611398089112624, -0.27195386014131745, -0.4779324346269931, -0.4614956287664939, -0.23180119500971005, 0.10537933402923153, 0.3937039999941637, 0.49977543743319536, 0.3744484682248588, 0.07576081910065512, -0.2580034478738602, -0.47150162904969084, -0.4699247652105097, -0.2674070483786612, 0.05133384509144969, 0.33460976702654954, 0.48008715782106276, 0.48008010988290006, 0.3343771894941442, 0.1437876614384396, 0.0047844152057207635, -0.17233960579392654, -0.15570743875067025, -0.28585807051325124, -0.13209869435398852, -0.2283755057523713, 0.040340879828572665, -0.11845420979242446, 0.24784799749103945, 0.010822088785724052, 0.3416319215987349, 0.09827430958973277, 0.29542350400930056, 0.03494442079862973, 0.08425372598032013, -0.19206954317559571, -0.26211040431568533, -0.4596975507557549, -0.49132306957298805, -0.4492625076351621, -0.2921391217240994, -0.04089270779900061, 0.21452345436443837, 0.4180066142601316, 0.4996461779625534, 0.4370289901469082, 0.24813267493346644, -0.012530613292093068, -0.26953895194099287, -0.44866134546139763, -0.4981008852157491, -0.4028603124245087, -0.18195018323173417, 0.08874449531055373, 0.362326228291619, 0.48824416947123894, 0.4252444937326231, 0.20415922741269077, -0.27059443332767, -0.4612422379572991, -0.24504729661457988, 0.06493217935830553, 0.39233037224791056, 0.1761077222530731, -0.32566473626190545, -0.12093494650181105, 0.13388412684040382, -0.18645196219208535, 0.07464264252137472, 0.47661824587367324, -0.17627361324416843, -0.5531782925479763, 0.12113000632928103, 0.5366913965335829, 0.16030799254441377, -0.2649764176065761, -0.4747388572545918, -0.4129348481745971, -0.21751624881259132, 0.03560169201844909, 0.09212596362102861, 0.15758068647404222, 0.06611401531246695, -0.10975337726371596, -0.12861264672586464, -0.5661659574674444, -0.05966502051371298, -0.037588495411267915, 0.008008790768627056, 0.5961939523864214, 0.13600901143311292, -0.04847512936506956, 0.011571487055478263, -0.44163276506732785, -0.20590733716821746, -0.3971109831366927, -0.14093417616611773, -0.03222397579759704, 0.30644490724921364, 0.5149737020172284, 0.28764561508837305, -0.3481975985588571, -0.28278374649408594, 0.37217672973505717, 0.250603379816587, -0.5863793031305458, -0.27264486839545693, 0.0640484058170188, -0.15620404544535016, 0.5604687711122225, 0.2565727515294773, -0.2460754351351431, 0.16383110145645302, -0.04068373298459118, -0.35217258674898777, -0.11906891601308052, 0.2573519879535378, 0.4748521553156519, 0.20004014564467204, -0.2937048664852197, -0.4836617118668694, -0.4146875844215301, -0.13500962715373263, 0.22045676445703694, 0.4569668898315982, 0.48102994242775493, 0.2830093344767274, -0.04641398109449486, -0.3541506606228295, -0.4980151566410378, -0.4112640143365568, -0.13412132652117173, 0.20479807465074049, 0.4412270465320054, 0.4906057971583807, 0.36737813331605185, 0.08558335130284797, -0.0913006316296661, -0.3355634621917202, -0.3312249031230552, -0.4442807193755707, -0.24456799894100553, -0.3418756232618979, 0.1200622489497547, 0.33471148453802324, -0.13889642085720283, 0.12094194773705118, 0.21879640717236154, -0.1531646276077207, -0.2325444212908718, 0.11038686821549837, 0.07988318146660234, -0.3571881939341946, 0.05631168546116118, 0.5398247591096249, 0.31432059567073295, 0.5142970969824799, 0.461596374168958]
plt.plot([i for i in range(len(dataI))], dataI)
plt.plot([i for i in range(len(dataQ))], dataQ)
#print([I[t] - ht[t] for t in range(len(t))])
#plt.plot(t, I)
plt.show()
